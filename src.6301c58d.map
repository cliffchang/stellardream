{"version":3,"sources":["weightedChoice.ts","stars.ts","../node_modules/alea/alea.js","starSystem.ts","index.ts"],"names":[],"mappings":"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","file":"src.6301c58d.map","sourceRoot":"../src","sourcesContent":["export default function weightedRandom<T>(weights: Array<[T, number]>, normalizedValue: number): T {\n  let sumOfWeights = 0;\n  for (let item of weights) {\n    sumOfWeights += item[1];\n  }\n\n  const randomValue: number = normalizedValue * sumOfWeights;\n \n  let sumSoFar = 0;\n  for (let [value, weight] of weights) {\n    sumSoFar += weight;\n    if (randomValue <= sumSoFar) {\n      return value;\n    }\n  }\n\n  throw new Error(\"Choice error: \" + randomValue);\n}","import weightedChoice from \"./weightedChoice\";\n\nfunction normalizedToRange(min: number, max: number, val: number): number {\n  return min + (max - min) * val;\n}\n\n/* STARS */\n\nexport enum StarType {\n  /* Planets in HZ will be tidally locked very quickly\n   */\n  M = \"M\",\n  /* Starting to look good. Kepler searches star types K-F.\n   */\n  K = \"K\",\n  G = \"G\", // the sun is a G2\n  F = \"F\",\n  /* Stars age too quickly - only support life for about 2 billion years. Life may\n     be microbial, but likely no trees.\n   */\n  A = \"A\",\n  B = \"B\",\n  /*\n  Planetary dust disks located within 1.6 light-years of O-type stars are\n  likely to be \"boiled off\" by superhot radiation and winds\n  (therefore O-type stars likely won't have planets)\n  */\n  O = \"O\"  \n}\n\n// http://lup.lub.lu.se/luur/download?func=downloadFile&recordOId=8867455&fileOId=8870454\nexport const StarTypeProbabilities = new Map<StarType, number>([\n  [StarType.M, 0.7645629],\n  [StarType.K, 0.1213592],\n  [StarType.G, 0.0764563],\n  [StarType.F, 0.0303398],\n  [StarType.A, 0.0060679],\n  [StarType.B, 0.0012136],\n  [StarType.O, 0.0000003],\n]);\n\nexport const StarTemperature = new Map<StarType, number>([\n  [StarType.M, 3850],\n  [StarType.K, 5300],\n  [StarType.G, 5920],\n  [StarType.F, 7240],\n  [StarType.A, 9500],\n  [StarType.B, 31000],\n  [StarType.O, 41000],\n]);\n\nexport const StarLuminosityMin = new Map<StarType, number>([\n  [StarType.M, 0.000158],\n  [StarType.K, 0.086],\n  [StarType.G, 0.58],\n  [StarType.F, 1.54],\n  [StarType.A, 4.42],\n  [StarType.B, 21.2],\n  [StarType.O, 26800],\n]);\n\nexport const StarLuminosityMax = new Map<StarType, number>([\n  [StarType.M, 0.086],\n  [StarType.K, 0.58],\n  [StarType.G, 1.54],\n  [StarType.F, 4.42],\n  [StarType.A, 21.2],\n  [StarType.B, 26800],\n  [StarType.O, 78100000],\n]);\n\nexport const StarRadiusMin = new Map<StarType, number>([\n  [StarType.M, 0.08],\n  [StarType.K, 0.7],\n  [StarType.G, 0.96],\n  [StarType.F, 1.15],\n  [StarType.A, 1.4],\n  [StarType.B, 1.8],\n  [StarType.O, 6.6],\n]);\n\nexport const StarRadiusMax = new Map<StarType, number>([\n  [StarType.M, 0.7],\n  [StarType.K, 0.96],\n  [StarType.G, 1.15],\n  [StarType.F, 1.4],\n  [StarType.A, 1.8],\n  [StarType.B, 6.6],\n  [StarType.O, 12],\n]);\n\n\n// http://www.vendian.org/mncharity/dir3/starcolor/\nexport const StarColors = new Map<StarType, string>([\n  [StarType.O, '#9bb0ff'],\n  [StarType.B, '#aabfff'],\n  [StarType.A, '#cad7ff'],\n  [StarType.F, '#f8f7ff'],\n  [StarType.G, '#fff4ea'],\n  [StarType.K, '#ffd2a1'],\n  [StarType.M, '#ffcc6f'],\n]);\n\n// http://www.solstation.com/habitable.htm\n/**\n* ~44% of F6-K3 stars with 0.5-1.5 stellar masses are likely binary/multiple star systems,\n* making stable orbits extremely unlikely unless the stars are close together.\n* \n* Inside HZ: \"water is broken up by stellar radiation into oxygen and hydrogen...\n* the freed hydrogen would escape to space due to the relatively puny\n* gravitational pull of small rocky planets like Earth\"\n* \n* Outside HZ: \"atmospheric carbon dioxide condenses...which eliminates its\n* greenhouse warming effect.\"\n* \n* Stars get brighter as they age, so HZ expands outward. CHZ = \"continuously habitable zone\"\n* over time.\n*/\nexport const HabitableZonePlanetLikelihoods = new Map<StarType, number>([\n  [StarType.M, 0.0002],\n  [StarType.K, 0.001],\n  [StarType.G, 0.002],\n  [StarType.F, 0.001],\n  // my sources don't discuss these star types, and they are rare, so just pick\n  // some random small values\n  [StarType.A, 0.0002],\n  [StarType.B, 0.00015],\n  [StarType.O, 0.0001],\n]);\n\n// \"normalized solar flux factor\"\n// http://www.solstation.com/habitable.htm\nconst SeffInner = new Map<StarType, number>([\n  [StarType.M, 1.05],\n  [StarType.K, 1.05],\n  [StarType.G, 1.41],\n  [StarType.F, 1.9],\n  [StarType.A, 0],\n  [StarType.B, 0],\n  [StarType.O, 0],\n]);\n\nconst SeffOuter = new Map<StarType, number>([\n  [StarType.M, 0.27],\n  [StarType.K, 0.27],\n  [StarType.G, 0.36],\n  [StarType.F, 0.46],\n  [StarType.A, 0],\n  [StarType.B, 0],\n  [StarType.O, 0],\n]);\n\nfunction computeHabitableZoneHelper(luminosity: number, seff: number): number {\n  return 1 * Math.pow(luminosity / seff, 0.5);\n}\n\nexport function computeHabitableZone(t: StarType, luminosity: number): [number, number] {\n  return [\n      computeHabitableZoneHelper(luminosity, SeffInner.get(t)!),\n      computeHabitableZoneHelper(luminosity, SeffOuter.get(t)!)]\n}\n\n/*\n// this is garbage and wrong, don't use this\nexport function computeRadius(t: StarType, luminosity: number): number {\n  const temperature = StarTemperature.get(t)!;\n  const tempRatio = temperature / StarTemperature.get(StarType.G)!\n\n  return Math.sqrt(Math.pow(tempRatio, 4) / luminosity);\n}\n*/\n\nexport class Star {\n    starType: StarType;\n    luminosity: number;\n    mass: number;\n    radius: number;\n    color: string;\n\n    constructor(alea: any) {\n        let weights = Array<[StarType, number]>();\n        StarTypeProbabilities.forEach((v: number, k: StarType) => {\n          weights.push([k, v]);\n        });\n        this.starType = weightedChoice(weights, alea());\n            // StarTypeProbabilities.keys().map((k: StarType) => []), alea);\n        this.color = StarColors.get(this.starType)!;\n\n        const sizeValue = alea();\n        this.luminosity = normalizedToRange(\n          StarLuminosityMin.get(this.starType)!,\n          StarLuminosityMax.get(this.starType)!,\n          sizeValue);\n        this.radius = normalizedToRange(\n          StarRadiusMin.get(this.starType)!,\n          StarRadiusMax.get(this.starType)!,\n          sizeValue);\n\n        // https://en.wikipedia.org/wiki/Mass%E2%80%93luminosity_relation\n        this.mass = Math.pow(this.luminosity, 1 / 3.5);\n    }\n}","(function (root, factory) {\n  if (typeof exports === 'object') {\n      module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n      define(factory);\n  } else {\n      root.Alea = factory();\n  }\n}(this, function () {\n\n  'use strict';\n\n  // From http://baagoe.com/en/RandomMusings/javascript/\n\n  // importState to sync generator states\n  Alea.importState = function(i){\n    var random = new Alea();\n    random.importState(i);\n    return random;\n  };\n\n  return Alea;\n\n  function Alea() {\n    return (function(args) {\n      // Johannes Baagøe <baagoe@baagoe.com>, 2010\n      var s0 = 0;\n      var s1 = 0;\n      var s2 = 0;\n      var c = 1;\n\n      if (args.length == 0) {\n        args = [+new Date];\n      }\n      var mash = Mash();\n      s0 = mash(' ');\n      s1 = mash(' ');\n      s2 = mash(' ');\n\n      for (var i = 0; i < args.length; i++) {\n        s0 -= mash(args[i]);\n        if (s0 < 0) {\n          s0 += 1;\n        }\n        s1 -= mash(args[i]);\n        if (s1 < 0) {\n          s1 += 1;\n        }\n        s2 -= mash(args[i]);\n        if (s2 < 0) {\n          s2 += 1;\n        }\n      }\n      mash = null;\n\n      var random = function() {\n        var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32\n        s0 = s1;\n        s1 = s2;\n        return s2 = t - (c = t | 0);\n      };\n      random.uint32 = function() {\n        return random() * 0x100000000; // 2^32\n      };\n      random.fract53 = function() {\n        return random() + \n          (random() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\n      };\n      random.version = 'Alea 0.9';\n      random.args = args;\n\n      // my own additions to sync state between two generators\n      random.exportState = function(){\n        return [s0, s1, s2, c];\n      };\n      random.importState = function(i){\n        s0 = +i[0] || 0;\n        s1 = +i[1] || 0;\n        s2 = +i[2] || 0;\n        c = +i[3] || 0;\n      };\n \n      return random;\n\n    } (Array.prototype.slice.call(arguments)));\n  }\n\n  function Mash() {\n    var n = 0xefc8249d;\n\n    var mash = function(data) {\n      data = data.toString();\n      for (var i = 0; i < data.length; i++) {\n        n += data.charCodeAt(i);\n        var h = 0.02519603282416938 * n;\n        n = h >>> 0;\n        h -= n;\n        h *= n;\n        n = h >>> 0;\n        h -= n;\n        n += h * 0x100000000; // 2^32\n      }\n      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n    };\n\n    mash.version = 'Mash 0.9';\n    return mash;\n  }\n}));\n","import Alea from \"alea\";\nimport {\n    Star,\n} from \"./stars\";\n\nexport class StarSystem {\n    seed: number;\n    stars: Array<Star>;\n\n    constructor(seed: number) {\n        this.seed = seed;\n\n        const alea = new (Alea as any)(seed);\n\n        this.stars = [new Star(alea)];\n        \n        if (alea() > 0.5) {\n            this.stars.push(new Star(alea));\n        }\n\n        this.stars.sort((a, b) => {\n            return b.mass - a.mass;\n        });\n    }\n}","import Alea from \"alea\";\nimport {\n    StarTypeProbabilities,\n    StarType,\n    HabitableZonePlanetLikelihoods,\n} from \"./stars\";\nimport {StarSystem} from \"./starSystem\";\n\n/// Tweak probability values to make planets more habitable and life-infested\nfunction cheatStars() {\n    StarTypeProbabilities.set(StarType.K, StarTypeProbabilities.get(StarType.K)! + 0.5);\n    StarTypeProbabilities.set(StarType.G, StarTypeProbabilities.get(StarType.G)! + 0.5);\n    StarTypeProbabilities.set(StarType.F, StarTypeProbabilities.get(StarType.F)! + 0.5);\n\n    // Cheat so about half of G-type stars have a planet in their habitable zones\n    for (let k of Object.keys(StarType)) {\n        const t = StarType[k as keyof typeof StarType];\n        HabitableZonePlanetLikelihoods.set(t, HabitableZonePlanetLikelihoods.get(t)! * 250);\n    }\n}\n// cheatStars();\n\n// main\nconst main = document.getElementById(\"js-main\");\nconst seed = Date.now();\n\nif (main) {\n    main.innerHTML = '';\n    for (let i=0; i<102; i++) {\n        const system = new StarSystem(seed + i);\n\n        const systemEl = document.createElement('div');\n        systemEl.className = 'system';\n\n        for (let star of system.stars) {\n            // const labelEl = document.createElement('div');\n            // labelEl.innerHTML = star.starType;\n            // labelEl.style.textAlign = 'center';\n            // systemEl.appendChild(labelEl);\n\n            const starEl = document.createElement('div');\n            systemEl.appendChild(starEl);\n            starEl.className = 'star';\n            starEl.style.backgroundColor = star.color;\n            starEl.innerHTML = star.starType;\n\n            const w = 10 / 0.08 * star.radius;\n            starEl.style.width = w.toString() + 'px';\n            starEl.style.height = w.toString() + 'px';\n            starEl.style.borderRadius = (w / 2).toString() + 'px';\n\n            console.table(system.stars[0]);\n        }\n\n        main.appendChild(systemEl);\n    }\n}"]}